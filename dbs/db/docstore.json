[["0",{"pageContent":"1\nTable of Contents\nPreface\nThe C Handbook\nConclusion","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":2,"lines":{"from":1,"to":5}}}}],["1",{"pageContent":"2\nPreface\nThe C Handbook follows the 80/20 rule: learn in 20% of the time the 80% of\na topic.\nIn particular, the goal is to get you up to speed quickly with C.\nThis book is written by Flavio. I publish programming tutorials on my\nblog flaviocopes.com and I organize a yearly bootcamp at bootcamp.dev.\nYou can reach me on Twitter @flaviocopes.\nEnjoy!","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":3,"lines":{"from":1,"to":9}}}}],["2",{"pageContent":"3\nThe C Handbook\n1. Introduction to C\n2. Variables and types\n2.1. Integer numbers\n2.2. Unsigned integers\n2.3. The problem with overflow\n2.4. Warnings when declaring the wrong type\n2.5. Floating point numbers\n3. Constants\n4. Operators\n4.1. Arithmetic operators\n4.2. Comparison operators\n4.3. Logical operators\n4.4. Compound assignment operators\n4.5. Miscellaneous operators\n4.5.1. The ternary operator\n4.5.2. sizeof\n4.6. Operator precedence\n5. Conditionals\n5.1.  if \n5.2.  switch \n6. Loops\n6.1. For loops\n6.2. While loops\n6.3. Do while loops\n6.4. Breaking out of a loop using  break \n7. Arrays\n8. Strings\n9. Pointers\n10. Functions\n11. Input and Output\n11.1.  printf()","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":4,"lines":{"from":1,"to":33}}}}],["3",{"pageContent":"4\n11.2.  scanf() \n12. Variables scope\n13. Static variables\n14. Global variables\n15. Type definitions\n16. Enumerated Types\n17. Structures\n18. Command line parameters\n19. Header files\n20. The preprocessor\n20.1. Conditionals\n20.2. Symbolic constants\n20.3. Macros\n20.4. If defined\n20.5. Predefined symbolic constants you can use\n1. Introduction to C\nC is probably the most widely known programming language. It is used as the\nreference language for computer science courses all over the world, and it's\nprobably the  language that  people learn  the  most  in  school among with\nPython and Java.\nI remember it being my second programming language ever, after Pascal.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":5,"lines":{"from":1,"to":22}}}}],["4",{"pageContent":"C is not just what students use to learn programming. It's not an academic\nlanguage. And I would say it's not the easiest language, because C is a rather\nlow level programming language.\nToday, C is widely used in embedded devices, and it powers most of the\nInternet servers, which are built using Linux. The Linux kernel is built using\nC, and this also means that C powers the core of all Android devices. We can\nsay that C code runs a good portion of the entire world. Right now. Pretty\nremarkable.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":5,"lines":{"from":23,"to":30}}}}],["5",{"pageContent":"5\nWhen it was created, C was considered a high level language, because it was\nportable across machines. Today we kind of give for granted that we can run\na program written on a Mac on Windows or Linux, perhaps using Node.js or\nPython. Once upon a time, this was not the case at all. What C brought to the\ntable was a language simple to implement, having a compiler that could be\neasily ported to different machines.\nI said compiler: C is a compiled programming language, like Go, Java, Swift\nor  Rust.  Other popular programming language like  Python, Ruby  or\nJavaScript are interpreted. The difference is consistent: a compiled language","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":6,"lines":{"from":1,"to":10}}}}],["6",{"pageContent":"generates a binary file that can be directly executed and distributed.\nC is not garbage collected. This means we have to manage memory ourselves.\nIt's a complex task and one that requires a lot of attention to prevent bugs,\nbut it is also what makes C ideal to write programs for embedded devices like\nArduino.\nC  does  not  hide  the  complexity and  the  capabilities of  the  machine\nunderneath. You have a lot of power, once you know what you can do.\nI want to introduce the first C program now, which we'll call \"Hello, World!\"\nhello.c\n#include <stdio.h> \n \nint main(void) { \n    printf(\"Hello, World!\"); \n} \nLet's describe the program source code: we first import the  stdio  library","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":6,"lines":{"from":11,"to":25}}}}],["7",{"pageContent":"(the name stands for standard input-output library).\nThis library gives us access to input/output functions.\nC is a very small language at its core, and anything that's not part of the core\nis  provided by  libraries. Some of  those  libraries are  built  by  normal\nprogrammers, and made available for others to use. Some other libraries are","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":6,"lines":{"from":26,"to":30}}}}],["8",{"pageContent":"6\nbuilt into the compiler. Like  stdio  and others.\n stdio  is the libraries that provides the  printf()  function.\nThis function is wrapped into a  main()  function. The  main()  function is the\nentry point of any C program.\nBut what is a function, anyway?\nA function is a routine that takes one or more arguments, and returns a\nsingle value.\nIn the case of  main() ,  the  function gets  no  arguments, and  returns an\ninteger. We identify that using the  void  keyword for the argument, and the\n int  keyword for the return value.\nThe function has a body, which is wrapped in curly braces, and inside the\nbody we have all the code that the function needs to perform its operations.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":7,"lines":{"from":1,"to":13}}}}],["9",{"pageContent":"The  printf()  function is written differently, as you can see. It has no return\nvalue defined, and we pass a string, wrapped in double quotes. We didn't\nspecify the type of the argument.\nThat's because this is a function invocation. Somewhere, inside the  stdio \nlibrary,  printf  is defined as\nint printf(const char *format, ...); \nYou don't need to understand what this means now, but in short, this is the\ndefinition and  when  we  call  printf(\"Hello, World!\"); ,  that's  where the\nfunction is ran.\nThe  main()  function we defined above:\n#include <stdio.h> \n \nint main(void) { \n    printf(\"Hello, World!\"); \n}","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":7,"lines":{"from":14,"to":28}}}}],["10",{"pageContent":"7\nwill be ran by the operating system when the program is executed.\nHow do we execute a C program?\nAs mentioned, C is a compiled language. To run the program we must first\ncompile it. Any Linux or macOS computer already comes with a C compiler\nbuilt-in. For  Windows, you  can  use  the  Windows Subsystem for  Linux\n(WSL).\nIn any case, when you open the terminal window you can type  gcc , and this\ncommand should return you an error saying that you didn't specify any file:\nThat's good. It means the C compiler is there, and we can start using it.\nNow type the program above into a  hello.c  file. You can use any editor, but","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":8,"lines":{"from":1,"to":11}}}}],["11",{"pageContent":"for the sake of simplicity I'm going to use the  nano  editor in the command\nline:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":8,"lines":{"from":12,"to":13}}}}],["12",{"pageContent":"8\nType the program:\nNow press  ctrl-X  to exit:\nConfirm by pressing the  y  key, then press enter to confirm the file name:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":9,"lines":{"from":1,"to":4}}}}],["13",{"pageContent":"9\nThat's it, we should be back to the terminal now:\nNow type\ngcc hello.c -o hello \nThe program should give you no errors:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":10,"lines":{"from":1,"to":5}}}}],["14",{"pageContent":"10\nbut it should have generated a  hello  executable. Now type\n./hello \nto run it:\nI  prepend  ./   to  the  program  name, to  tell  the  terminal that  the\ncommand is in the current folder\nAwesome!\nNow if you call  ls -al hello , you can see that the program is only 12KB in\nsize:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":11,"lines":{"from":1,"to":9}}}}],["15",{"pageContent":"11\nThis is one of the pros of C: it's highly optimized, and this is also one of the\nreasons it's this good for embedded devices that have a very limited amount\nof resources.\n2. Variables and types\nC is a statically typed language.\nThis means that any variable has an associated type, and this type is known\nat compilation time.\nThis is very different than how you work with variables in Python, JavaScript,\nPHP and other interpreted languages.\nWhen you create a variable in C, you have to specify the type of a variable at\nthe declaration.\nIn this example we initialize a variable  age  with type  int :\nint age; \nA variable name can contain any uppercase or lowercase letter, can contain","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":12,"lines":{"from":1,"to":15}}}}],["16",{"pageContent":"digits and the underscore character, but it can't start with a digit.  AGE  and\n Age10  are valid variable names,  1age  is not.\nYou can also initialize a variable at declaration, specifying the initial value:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":12,"lines":{"from":16,"to":18}}}}],["17",{"pageContent":"12\nint age = 37; \nOnce you declare a variable, you are then able to use it in your program code,\nand you can change its value at any time, using the  =  operator for example,\nlike in  age = 100; , provided the new value is of the same type.\nIn this case:\n#include <stdio.h> \n \nint main(void) { \n    int age = 0; \n    age = 37.2; \n    printf(\"%u\", age); \n} \nthe  compiler will  raise  a  warning at  compile time,  and  will  convert the\ndecimal number to an integer value.\nThe C built-in data types are  int ,  char ,  short ,  long ,  float ,  double ,\n long double . Let's find out more about those.\n2.1. Integer numbers\nC provides us the following types to define integer values:\n char \n int","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":13,"lines":{"from":1,"to":21}}}}],["18",{"pageContent":"short \n long \nMost of the times, you'll likely use an  int  to store an integer. But in some\ncases, you might want to choose one of the other 3 options.\nThe  char  type is commonly used to store letters of the ASCII chart, but it\ncan be used to hold small integers from  -128  to  127 . It takes at least 1 byte.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":13,"lines":{"from":22,"to":27}}}}],["19",{"pageContent":"13\n int  takes at least 2 bytes.  short  takes at least 2 bytes.  long  takes at least\n4 bytes.\nAs  you  can  see,  we  are  not  guaranteed the  same  values for  different\nenvironments. We only have an indication. The problem is that the exact\nnumbers that can be stored in each data type depends on the implementation\nand the architecture.\nWe're guaranteed that  short  is not longer than  int . And we're guaranteed\n long  is not shorter than  int .\nThe ANSI C spec standard determines the minimum values of each type, and\nthanks to it we can at least know what's the minimum value we can expect to\nhave at our disposal.\nIf you are programming C on an Arduino, different board will have different","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":14,"lines":{"from":1,"to":13}}}}],["20",{"pageContent":"limits.\nOn an Arduino Uno board,  int  stores a 2 byte value, ranging from  -32,768 \nto  32,767 . On a Arduino MKR 1010,  int  stores a 4 bytes value, ranging\nfrom  -2,147,483,648  to  2,147,483,647 . Quite a big difference.\nOn all Arduino boards,  short  stores a 2 bytes value, ranging from  -32,768 \nto  32,767 .  long   store  4  bytes, ranging from  -2,147,483,648   to\n 2,147,483,647 .\n2.2. Unsigned integers\nFor all the above data types, we can prepend  unsigned  to start the range at\n0, instead of a negative number. This might make sense in many cases.\n unsigned char  will range from  0  to at least  255 \n unsigned int  will range from  0  to at least  65,535","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":14,"lines":{"from":14,"to":25}}}}],["21",{"pageContent":"unsigned short  will range from  0  to at least  65,535 \n unsigned long  will range from  0  to at least  4,294,967,295 \n2.3. The problem with overflow","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":14,"lines":{"from":26,"to":28}}}}],["22",{"pageContent":"14\nGiven all those limits, a question might come up: how can we make sure our\nnumbers do not exceed the limit? And what happens it we do exceed the\nlimit?\nIf you have an  unsigned int  number at 255, and you increment it, you'll get\n256 in return. As expected. If you have a  unsigned char  number at 255, and\nyou increment it, you'll get 0 in return. It resets starting from the initial\npossible value.\nIf you have a  unsigned char  number at 255 and you add 10 to it, you'll get\nthe number  9 :\n#include <stdio.h> \n \nint main(void) { \n  unsigned char j = 255; \n  j = j + 10; \n  printf(\"%u\", j); /* 9 */ \n} \nIf you have a signed value, the behavior is undefined. It will basically give you","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":15,"lines":{"from":1,"to":18}}}}],["23",{"pageContent":"a huge number which can vary, like in this case:\n#include <stdio.h> \n \nint main(void) { \n  char j = 127; \n  j = j + 10; \n  printf(\"%u\", j); /* 4294967177 */ \n} \nIn other words, C does not protect you from going over the limits of a type.\nYou need to take care of this yourself.\n2.4. Warnings when declaring the wrong type\nWhen you declare the variable and initialize it with the wrong value, the  gcc \ncompiler (the one you're probably using) should warn you:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":15,"lines":{"from":19,"to":31}}}}],["24",{"pageContent":"15\n#include <stdio.h> \n \nint main(void) { \n  char j = 1000; \n} \nhello.c:4:11: warning: implicit conversion \n  from 'int' to \n      'char' changes value from 1000 to -24 \n      [-Wconstant-conversion] \n        char j = 1000; \n             ~   ^~~~ \n1 warning generated. \nAnd it also warns you in direct assignments:\n#include <stdio.h> \n \nint main(void) { \n  char j; \n  j = 1000; \n} \nBut not if you increase the number using for example  += :\n#include <stdio.h> \n \nint main(void) { \n  char j = 0; \n  j += 1000; \n} \n2.5. Floating point numbers\nFloating point types can represent a much larger set of values than integers\ncan, and can also represent fractions, something that integers can't do.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":16,"lines":{"from":1,"to":30}}}}],["25",{"pageContent":"16\nUsing floating point numbers, we represent numbers as decimal numbers\ntimes powers of 10.\nYou might see floating point numbers written as\n 1.29e-3 \n -2.3e+5 \nand in other seemingly weird ways.\nThe following types:\n float \n double \n long double \nare used to represent numbers with decimal points (floating point types). All\ncan represent both positive and negative numbers.\nThe minimum requirements for any C implementation is that  float  can\nrepresent a range between 10^-37 and 10^+37, and is typically implemented\nusing 32 bits.  double  can represent a bigger set of numbers.  long double \ncan hold even more numbers.\nThe exact figures, as with integer values, depend on the implementation.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":17,"lines":{"from":1,"to":18}}}}],["26",{"pageContent":"On a modern Mac, a  float  is represented in 32 bits, and has a precision of\n24 significant bits, 8 bits are used to encode the exponent. A  double  number\nis represented in 64 bits, with a precision of 53 significant bits, 11 bits are\nused to encode the exponent. The type  long double  is represented in 80\nbits, has a precision of 64 significant bits, 15 bits are used to encode the\nexponent.\nOn your specific computer, how can you determine the specific size of the\ntypes? You can write a program to do that:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":17,"lines":{"from":19,"to":26}}}}],["27",{"pageContent":"17\n#include <stdio.h> \n \nint main(void) { \n  printf(\"char size: %lu bytes\\n\", sizeof(char)); \n  printf(\"int size: %lu bytes\\n\", sizeof(int)); \n  printf(\"short size: %lu bytes\\n\", sizeof(short)); \n  printf(\"long size: %lu bytes\\n\", sizeof(long)); \n  printf(\"float size: %lu bytes\\n\", sizeof(float)); \n  printf(\"double size: %lu bytes\\n\", \n    sizeof(double)); \n  printf(\"long double size: %lu bytes\\n\", \n    sizeof(long double)); \n} \nIn my system, a modern Mac, it prints:\nchar size: 1 bytes \nint size: 4 bytes \nshort size: 2 bytes \nlong size: 8 bytes \nfloat size: 4 bytes \ndouble size: 8 bytes \nlong double size: 16 bytes \n3. Constants\nLet's now talk about constants.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":18,"lines":{"from":1,"to":24}}}}],["28",{"pageContent":"A constant is declared similarly to variables, except it is prepended with the\n const  keyword, and you always need to specify a value.\nLike this:\nconst int age = 37; \nThis  is  perfectly valid  C,  although it  is  common to  declare  constants\nuppercase, like this:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":18,"lines":{"from":25,"to":30}}}}],["29",{"pageContent":"18\nconst int AGE = 37; \nIt's just a convention, but one that can greatly help you while reading or\nwriting a  C  program  as  it  improves readability. Uppercase name  means\nconstant, lowercase name means variable.\nA constant name follows the same rules for variable names: can contain any\nuppercase or  lowercase letter,  can  contain digits and  the  underscore\ncharacter, but it can't start with a digit.  AGE  and  Age10  are valid variable\nnames,  1AGE  is not.\nAnother way to define constants is by using this syntax:\n#define AGE 37\nIn this case, you don't need to add a type, and you don't also need the  = \nequal sign, and you omit the semicolon at the end.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":19,"lines":{"from":1,"to":13}}}}],["30",{"pageContent":"The C compiler will infer the type from the value specified, at compile time.\n4. Operators\nC offers us a wide variety of operators that we can use to operate on data.\nIn particular, we can identify various groups of operators:\narithmetic operators\ncomparison operators\nlogical operators\ncompound assignment operators\nbitwise operators\npointer operators\nstructure operators\nmiscellaneous operators","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":19,"lines":{"from":14,"to":25}}}}],["31",{"pageContent":"19\nIn this section I'm going to detail all of them, using 2 imaginary variables  a \nand  b  as examples.\nI  am  keeping bitwise operators, structure operators and  pointer\noperators out of this list, to keep things simpler\n4.1. Arithmetic operators\nIn  this  macro group  I  am  going  to  separate binary operators and  unary\noperators.\nBinary operators work using two operands:\nOperatorNameExample\n = \nAssignment\n a = b \n + \nAddition\n a + b \n - \nSubtraction\n a - b \n * \nMultiplication\n a * b \n / \nDivision\n a / b \n % \nModulo\n a % b \nUnary operators only take one operand:\nOperatorNameExample\n + \nUnary plus\n +a \n - \nUnary minus\n -a \n ++ \nIncrement a++  or  ++a \n -- \nDecrement a--  or  --a","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":20,"lines":{"from":1,"to":40}}}}],["32",{"pageContent":"The difference between  a++  and  ++a  is that  a++  increments the  a \nvariable after using it.  ++a  increments the  a  variable before using it.\nFor example:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":20,"lines":{"from":41,"to":43}}}}],["33",{"pageContent":"20\nint a = 2; \nint b; \nb = a++ /* b is 2, a is 3 */ \nb = ++a /* b is 4, a is 4 */\nThe same applies to the decrement operator.\n4.2. Comparison operators\nOperatorNameExample\n == \nEqual operator\n a == b \n != \nNot equal operator\n a != b \n > \nBigger than\n a > b \n < \nLess than\n a < b \n >= \nBigger than or equal to\n a >= b \n <= \nLess than or equal to\n a <= b \n4.3. Logical operators\n !  NOT (example:  !a )\n &&  AND (example:  a && b )\n ||  OR (example:  a || b )\nThose operators are great when working with boolean values.\n4.4. Compound assignment operators\nThose operators are useful to perform an assignment and at the same time\nperform an arithmetic operation:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":21,"lines":{"from":1,"to":34}}}}],["34",{"pageContent":"21\nOperatorNameExample\n += \nAddition assignment\n a += b \n -= \nSubtraction assignment\n a -= b \n *= \nMultiplication assignment\n a *= b \n /= \nDivision assignment\n a /= b \n %= \nModulo assignment\n a %= b \n4.5. Miscellaneous operators\n4.5.1. The ternary operator\nThe ternary operator is the only operator in C that works with 3 operands,\nand it’s a short way to express conditionals.\nThis is how it looks:\n<condition> ? <expression> : <expression> \nExample:\na ? b : c \nIf  a  is evaluated to  true , then the  b  statement is executed, otherwise  c \nis.\nThe  ternary operator is  functionality-wise same  as  an  if/else conditional,","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":22,"lines":{"from":1,"to":28}}}}],["35",{"pageContent":"except it is shorter to express and it can be inlined into an expression.\n4.5.2. sizeof\nThe  sizeof  operator returns the size of the operand you pass. You can pass\na variable, or even a type.\nExample usage:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":22,"lines":{"from":29,"to":33}}}}],["36",{"pageContent":"22\n#include <stdio.h> \n \nint main(void) { \n  int age = 37; \n  printf(\"%ld\\n\", sizeof(age)); \n  printf(\"%ld\", sizeof(int)); \n} \n4.6. Operator precedence\nWith all those operators (and more, which I haven't covered in this post,\nincluding bitwise, structure operators and pointer operators), we must pay\nattention when using them together in a single expression.\nSuppose we have this operation:\nint a = 2; \nint b = 4; \nint c = b + a * a / b - a; \nWhat's the value of  c ? Do we get the addition being executed before the\nmultiplication and the division?\nThere is a set of rules that help us solving this puzzle.\nIn order from less precedence to more precedence, we have:\nthe  =  assignment operator","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":23,"lines":{"from":1,"to":21}}}}],["37",{"pageContent":"the  +  and  -  binary operators\nthe  *  and  /  operators\nthe  +  and  -  unary operators\nOperators also have an associativity rule, which is always left to right except\nfor the unary operators and the assignment.\nIn:\nint c = b + a * a / b - a;","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":23,"lines":{"from":22,"to":28}}}}],["38",{"pageContent":"23\nWe first execute  a * a / b , which due to being left-to-right we can separate\ninto  a * a  and the result  / b :  2 * 2 = 4 ,  4 / 4 = 1 .\nThen we can perform the sum and the subtraction: 4 + 1 - 2. The value of  c \nis  3 .\nIn  all  cases, however, I  want  to  make  sure  you  realize you  can  use\nparentheses to make any similar expression easier to read and comprehend.\nParentheses have higher priority over anything else.\nThe above example expression can be rewritten as:\nint c = b + ((a * a) / b) - a; \nand we don't have to think about it that much.\n5. Conditionals\nAny programming language provides the programmers the ability to perform\nchoices.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":24,"lines":{"from":1,"to":14}}}}],["39",{"pageContent":"We want to do X in some cases, and Y in other cases.\nWe want to check data, and do choices based on the state of that data.\nC provides us 2 ways to do so.\nThe first is the  if  statement, with its  else  helper, and the second is the\n switch  statement.\n5.1.  if \nIn an  if  statement, you can check for a condition to be true, and then\nexecute the block provided in the curly brackets:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":24,"lines":{"from":15,"to":22}}}}],["40",{"pageContent":"24\nint a = 1; \n \nif (a == 1) { \n  /* do something */ \n} \nYou can append an  else  block to execute a different block if the original\ncondition turns out to be false;\nint a = 1; \n \nif (a == 2) { \n  /* do something */ \n} else { \n  /* do something else */ \n} \nBeware one common source of bugs - always use the comparison operator\n ==  in comparisons, and not the assignment operator  = , otherwise the  if \nconditional check will always be true, unless the argument is  0 , for example\nif you do:\nint a = 0; \n \nif (a = 0) { \n  /* never invoked */ \n} \nWhy does this happen? Because the conditional check will look for a boolean\nresult (the result of a comparison), and the  0  number always equates to a","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":25,"lines":{"from":1,"to":26}}}}],["41",{"pageContent":"false value. Everything else is true, including negative numbers.\nYou  can  have  multiple  else   blocks  by  stacking  together multiple  if \nstatements:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":25,"lines":{"from":27,"to":29}}}}],["42",{"pageContent":"25\nint a = 1; \n \nif (a == 2) { \n  /* do something */ \n} else if (a == 1) { \n  /* do something else */ \n} else { \n  /* do something else again */ \n} \n5.2.  switch \nIf you need to do too many if / else / if blocks to perform a check, perhaps\nbecause you need to check the exact value of a variable, then  switch  can be\nvery useful to you.\nYou can provide a variable as condition, and a series of  case  entry points for\neach value you expect:\nint a = 1; \n \nswitch (a) { \n  case 0: \n    /* do something */ \n    break; \n  case 1: \n    /* do something else */ \n    break; \n  case 2: \n    /* do something else */ \n    break; \n} \nWe need a  break  keyword at the end of each case, to avoid the next case to","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":26,"lines":{"from":1,"to":30}}}}],["43",{"pageContent":"be executed when the one before ends. This \"cascade\" effect can be useful in\nsome creative ways.\nYou can add a \"catch-all\" case at the end, labeled  default :","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":26,"lines":{"from":31,"to":33}}}}],["44",{"pageContent":"26\nint a = 1; \n \nswitch (a) { \n  case 0: \n    /* do something */ \n    break; \n  case 1: \n    /* do something else */ \n    break; \n  case 2: \n    /* do something else */ \n    break; \n  default: \n    /* handle all the other cases */ \n    break; \n} \n6. Loops\nC offers us three ways to perform a loop: for loops, while loops and do\nwhile  loops.  They  all  allow  you  to  iterate  over  arrays, but  with  a  few\ndifferences. Let's see them in details.\n6.1. For loops\nThe first, and probably most common, way to perform a loop is for loops.\nUsing the  for  keyword we can define the rules of the loop up front, and\nthen provide the block that is going to be executed repeatedly.\nLike this:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":27,"lines":{"from":1,"to":26}}}}],["45",{"pageContent":"for (int i = 0; i <= 10; i++) { \n  /* instructions to be repeated */ \n} \nThe  (int i = 0; i <= 10; i++)  block contains 3 parts of the looping details:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":27,"lines":{"from":27,"to":30}}}}],["46",{"pageContent":"27\nthe initial condition ( int i = 0 )\nthe test ( i <= 10 )\nthe increment ( i++ )\nWe first define a loop variable, in this case named  i .  i  is a common\nvariable name to be used for loops, along with  j  for nested loops (a loop\ninside another loop). It's just a convention.\nThe variable is initialized at the 0 value, and the first iteration is done. Then\nit is incremented as the increment part says ( i++  in this case, incrementing\nby 1), and all the cycle repeats until you get to the number 10.\nInside the loop main block we can access the variable  i  to know at which\niteration we are. This program should print  0 1 2 3 4 5 5 6 7 8 9 10 :\nfor (int i = 0; i <= 10; i++) {","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":28,"lines":{"from":1,"to":13}}}}],["47",{"pageContent":"/* instructions to be repeated */ \n  printf(\"%u \", i); \n} \nLoops can also start from a high number, and go a lower number, like this:\nfor (int i = 10; i > 0; i--) { \n  /* instructions to be repeated */ \n} \nYou can also increment the loop variable by 2 or another value:\nfor (int i = 0; i < 1000; i = i + 30) { \n  /* instructions to be repeated */ \n} \n6.2. While loops\nWhile loops is simpler to write than a  for  loop, because it requires a bit\nmore work on your part.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":28,"lines":{"from":14,"to":27}}}}],["48",{"pageContent":"28\nInstead of defining all the loop data up front when you start the loop, like you\ndo in the  for  loop, using  while  you just check for a condition:\nwhile (i < 10) { \n \n} \nThis assumes that  i  is already defined and initialized with a value.\nAnd this loop will be an infinite loop unless you increment the  i  variable\nat some point inside the loop. An infinite loop is bad because it will block the\nprogram, nothing else can happen.\nThis is what you need for a \"correct\" while loop:\nint i = 0; \n \nwhile (i < 10) { \n  /* do something */ \n \n  i++; \n} \nThere's one exception to this, and we'll see it in one minute. Before, let me\nintroduce  do while .\n6.3. Do while loops","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":29,"lines":{"from":1,"to":21}}}}],["49",{"pageContent":"While loops are great, but there might be times when you need to do one\nparticular thing: you want to always execute a block, and then maybe repeat\nit.\nThis is done using the  do while  keyword, in a way that's very similar to a\n while  loop, but slightly different:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":29,"lines":{"from":22,"to":26}}}}],["50",{"pageContent":"29\nint i = 0; \n \ndo { \n  /* do something */ \n \n  i++; \n} while (i < 10); \nThe block that contains the  /* do something */  comment is always executed\nat least once, regardless of the condition check at the bottom.\nThen, until  i  is less than 10, we'll repeat the block.\n6.4. Breaking out of a loop using  break \nIn all the C loops we have a way to break out of a loop at any point in time,\nimmediately, regardless of the conditions set fo the loop.\nThis is done using the  break  keyword.\nThis is useful in many cases. You might want to check for the value of a\nvariable, for example:\nfor (int i = 0; i <= 10; i++) { \n  if (i == 4 && someVariable == 10) { \n    break; \n  } \n}","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":30,"lines":{"from":1,"to":22}}}}],["51",{"pageContent":"Having this option to break out of a loop is particularly interesting for  while \nloops (and  do while  too), because we can create seemingly infinite loops\nthat end when a condition occurs, and you define this inside the loop block:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":30,"lines":{"from":23,"to":25}}}}],["52",{"pageContent":"30\nint i = 0; \nwhile (1) { \n  /* do something */ \n \n  i++; \n  if (i == 10) break; \n} \nIt's rather common to have this kind of loops in C.\n7. Arrays\nAn array is a variable that stores multiple values.\nEvery value in the array, in C, must have the same type. This means you will\nhave arrays of  int  values, arrays of  double  values, and more.\nYou can define an array of  int  values like this:\nint prices[5]; \nYou must always specify the size of the array. C does not provide dynamic\narrays out of the box (you have to use a data structure like a linked list for\nthat).\nYou can use a constant to define the size:\nconst int SIZE = 5; \nint prices[SIZE];","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":31,"lines":{"from":1,"to":21}}}}],["53",{"pageContent":"You can initialize an array at definition time, like this:\nint prices[5] = { 1, 2, 3, 4, 5 }; \nBut you can also assign a value after the definition, in this way:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":31,"lines":{"from":22,"to":24}}}}],["54",{"pageContent":"31\nint prices[5]; \n \nprices[0] = 1; \nprices[1] = 2; \nprices[2] = 3; \nprices[3] = 4; \nprices[4] = 5; \nOr, more practical, using a loop:\nint prices[5]; \n \nfor (int i = 0; i < 5; i++) { \n  prices[i] = i + 1; \n} \nAnd you can reference an item in the array by using square brackets after the\narray variable name, adding an integer to determine the index value. Like\nthis:\nprices[0]; /* array item value: 1 */ \nprices[1]; /* array item value: 2 */\nArray indexes start from 0, so an array with 5 items, like the  prices  array\nabove, will have items ranging from  prices[0]  to  prices[4] .\nThe interesting thing about C arrays is that all elements of an array are stored","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":32,"lines":{"from":1,"to":22}}}}],["55",{"pageContent":"sequentially, one right after another. Not something that normally happens\nwith higher-level programming languages.\nAnother interesting thing is this: the variable name of the array,  prices  in\nthe above example, is a pointer to the first element of the array, and as such\ncan be used like a normal pointer.\nMore on pointers soon.\n8. Strings","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":32,"lines":{"from":23,"to":29}}}}],["56",{"pageContent":"32\nIn C, strings are one special kind of array: a string is an array of  char \nvalues:\nchar name[7]; \nI introduced the  char   type  when  I  introduced types, but  in  short  it  is\ncommonly used to store letters of the ASCII chart.\nA string can be initialized like you initialize a normal array:\nchar name[7] = { 'F', 'l', 'a', 'v', 'i', 'o' }; \nOr more conveniently with a string literal (also called string constant), a\nsequence of characters enclosed in double quotes:\nchar name[7] = \"Flavio\"; \nYou can print a string via  printf()  using  %s :\nprintf(\"%s\", name); \nDo you notice how \"Flavio\" is 6 chars long, but I defined an array of length 7?","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":33,"lines":{"from":1,"to":14}}}}],["57",{"pageContent":"Why? This is because the last character in a string must be a  0  value, the\nstring terminator, and we must make space for it.\nThis is important to keep in mind especially when manipulating strings.\nSpeaking of manipulating strings, there's one important standard library that\nis provided by C:  string.h .\nThis library is essential because it abstracts many of the low level details of\nworking with strings, and provides us a set of useful functions.\nYou can load the library in your program by adding on top:\n#include <string.h>","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":33,"lines":{"from":15,"to":23}}}}],["58",{"pageContent":"33\nAnd once you do that, you have access to:\n strcpy()  to copy a string over another string\n strcat()  to append a string to another string\n strcmp()  to compare two strings for equality\n strncmp()  to compare the first  n  characters of two strings\n strlen()  to calculate the length of a string\nand many, many more.\n9. Pointers\nPointers are one of the most confusing/challenging parts of C, in my opinion.\nEspecially if you are new to programming, but also if you come from a higher\nlevel programming language like Python or JavaScript.\nIn this section I want to introduce them in the simplest yet not-dumbed-\ndown way possible.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":34,"lines":{"from":1,"to":14}}}}],["59",{"pageContent":"A pointer is the address of a block of memory that contains a variable.\nWhen you declare an integer number like this:\nint age = 37; \nWe can use the  &  operator to get the value of the address in memory of a\nvariable:\nprintf(\"%p\", &age); /* 0x7ffeef7dcb9c */\nI used the  %p  format specified in  printf()  to print the address value.\nWe can assign the address to a variable:\nint *address = &age;","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":34,"lines":{"from":15,"to":23}}}}],["60",{"pageContent":"34\nUsing  int *address  in the declaration, we are not declaring an integer\nvariable, but rather a pointer to an integer.\nWe can use the pointer operator  *   to  get  the  value  of  the  variable an\naddress is pointing to:\nint age = 37; \nint *address = &age; \nprintf(\"%u\", *address); /* 37 */\nThis  time  we  are  using  the  pointer  operator again, but  since  it's  not  a\ndeclaration this time it means \"the value of the variable this pointer points\nto\".\nIn this example we declare an  age  variable, and we use a pointer to initialize\nthe value:\nint age; \nint *address = &age; \n*address = 37; \nprintf(\"%u\", *address);","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":35,"lines":{"from":1,"to":17}}}}],["61",{"pageContent":"When working with C, you'll find that a lot of things are built on top of this\nsimple concept, so make sure you familiarize with it a bit, by running the\nabove examples on your own.\nPointers are a great opportunity because they force us to think about memory\naddresses and how data is organized.\nArrays are one example. When you declare an array:\nint prices[3] = { 5, 4, 3 }; \nThe  prices  variable is actually a pointer to the first item of the array. You\ncan get the value of the first item using this  printf()  function in this case:\nprintf(\"%u\", *prices); /* 5 */","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":35,"lines":{"from":18,"to":27}}}}],["62",{"pageContent":"35\nThe cool thing is that we can get the second item by adding 1 to the  prices \npointer:\nprintf(\"%u\", *(prices + 1)); /* 4 */\nAnd so on for all the other values.\nWe can also do many nice string manipulation operations, since strings are\narrays under the hood.\nWe also have many more applications, including passing the reference of an\nobject or a function around, to avoid consuming more resources to copy it.\n10. Functions\nFunctions are the way we can structure our code into subroutines that we\ncan:\n1. give a name to\n2. call when we need them\nStarting from your very first program, an \"Hello, World!\", you immediately\nmake use of C functions:\n#include <stdio.h> \n \nint main(void) {","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":36,"lines":{"from":1,"to":19}}}}],["63",{"pageContent":"printf(\"Hello, World!\"); \n} \nThe  main()  function is a very important function, as it's the entry point for a\nC program.\nHere's another function:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":36,"lines":{"from":20,"to":24}}}}],["64",{"pageContent":"36\nvoid doSomething(int value) { \n    printf(\"%u\", value); \n} \nFunctions have 4 important aspects:\n1. they have a name, so we can invoke (\"call\") them later\n2. they specify a return value\n3. they can have arguments\n4. they have a body, wrapped in curly braces\nThe function body is the set of instructions that are executed any time we\ninvoke a function.\nIf the function has no return value, you can use the keyword  void  before the\nfunction name. Otherwise you specify the function return value type ( int \nfor an integer,  float  for a floating point value,  const char *  for a string,\netc).\nYou cannot return more than one value from a function.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":37,"lines":{"from":1,"to":16}}}}],["65",{"pageContent":"A function can have arguments. They are optional. If it does not have them,\ninside the parentheses we insert  void , like this:\nvoid doSomething(void) { \n   /* ... */ \n} \nIn this case, when we invoke the function we'll call it with nothing in the\nparentheses:\ndoSomething(); \nIf we have one parameter, we specify the type and the name of the parameter,\nlike this:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":37,"lines":{"from":17,"to":26}}}}],["66",{"pageContent":"37\nvoid doSomething(int value) { \n   /* ... */ \n} \nWhen we invoke the function, we'll pass that parameter in the parentheses,\nlike this:\ndoSomething(3); \nWe  can  have  multiple parameters,  and  if  so  we  separate them  using  a\ncomma, both in the declaration and in the invocation:\nvoid doSomething(int value1, int value2) { \n   /* ... */ \n} \n \ndoSomething(3, 4); \nParameters are passed by copy. This means that if you modify  value1 , its\nvalue is modified locally, and the value outside of the function, where it was\npassed in the invocation, does not change.\nIf you pass a pointer as a parameter, you can modify that variable value","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":38,"lines":{"from":1,"to":18}}}}],["67",{"pageContent":"because you can now access it directly using its memory address.\nYou can't define a default value for a parameter. C++ can do that (and so\nArduino Language programs can), but C can't.\nMake sure you define the function before calling it, or the compiler will raise\na warning and an error:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":38,"lines":{"from":19,"to":23}}}}],["68",{"pageContent":"38\n➜  ~ gcc hello.c -o hello; ./hello \nhello.c:13:3: warning: implicit declaration of \n      function 'doSomething' is invalid in C99 \n      [-Wimplicit-function-declaration] \n  doSomething(3, 4); \n  ^ \nhello.c:17:6: error: conflicting types for \n      'doSomething' \nvoid doSomething(int value1, char value2) { \n     ^ \nhello.c:13:3: note: previous implicit declaration \n      is here \n  doSomething(3, 4); \n  ^ \n1 warning and 1 error generated. \nThe warning you get regards the ordering, which I already mentioned.\nThe error is about another thing, related. Since C does not \"see\" the function\ndeclaration before the invocation, it must make assumptions. And it assumes","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":39,"lines":{"from":1,"to":19}}}}],["69",{"pageContent":"the function to return  int . The function however returns  void , hence the\nerror.\nIf you change the function definition to:\nint doSomething(int value1, int value2) { \n  printf(\"%d %d\\n\", value1, value2); \n  return 1; \n} \nyou'd just get the warning, and not the error:\n➜  ~ gcc hello.c -o hello; ./hello \nhello.c:14:3: warning: implicit declaration of \n      function 'doSomething' is invalid in C99 \n      [-Wimplicit-function-declaration] \n  doSomething(3, 4); \n  ^ \n1 warning generated.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":39,"lines":{"from":20,"to":34}}}}],["70",{"pageContent":"39\nIn any case, make sure you declare the function before using it. Either move\nthe function up, or add the function prototype in a header file.\nInside a function, you can declare variables.\nvoid doSomething(int value) { \n  int doubleValue = value * 2; \n} \nA  variable is  created at  the  point  of  invocation of  the  function,  and  is\ndestroyed when the function ends, and it's not visible from the outside.\nInside a function, you can call the function itself. This is called recursion\nand it's something that offers peculiar opportunities.\n11. Input and Output\nC is a small language, and the \"core\" of C does not include any Input/Output\n(I/O) functionality.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":40,"lines":{"from":1,"to":14}}}}],["71",{"pageContent":"This is not something unique to C, of course. It's common for the language\ncore to be agnostic of I/O.\nIn the case of C, Input/Output is provided to us by the C Standard Library via\na set of functions defined in the  stdio.h  header file.\nYou can import this library using:\n#include <stdio.h>\non top of your C file.\nThis library provides us, among many other functions:\n printf() \n scanf() \n sscanf()","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":40,"lines":{"from":15,"to":25}}}}],["72",{"pageContent":"40\n fgets() \n fprintf() \nBefore describing what those functions do, I want to take a minute to talk\nabout I/O streams.\nWe have 3 kinds of I/O streams in C:\n stdin  (standard input)\n stdout  (standard output)\n stderr  (standard error)\nWith I/O functions we always work with streams. A stream is a high level\ninterface that can represent a device or a file. From the C standpoint, we\ndon't have any difference in reading from a file or reading from the command\nline: it's an I/O stream in any case.\nThat's one thing to keep in mind.\nSome functions are designed to work with a specific stream, like  printf() ,\nwhich we  use  to  print  characters to  stdout .  Using its  more  general","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":41,"lines":{"from":1,"to":16}}}}],["73",{"pageContent":"counterpart  fprintf() , we can specify the stream to write to.\nSince I started talking about  printf() , let's introduce it now.\n11.1.  printf() \n printf()   is  one  of  the  first  functions you'll use  when learning C\nprogramming.\nIn its simplest usage form, you pass it a string literal:\nprintf(\"hey!\"); \nand the program will print the content of the string to the screen.\nYou can print the value of a variable, and it's a bit tricky because you need to\nadd a special character, a placeholder, which changes depending on the type\nof the variable. For example we use  %d  for a signed decimal integer digit:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":41,"lines":{"from":17,"to":27}}}}],["74",{"pageContent":"41\nint age = 37; \n \nprintf(\"My age is %d\", age); \nWe can print more than one variable by using commas:\nThere are other format specifiers like  %d :\n %c  for a char\n %s  for a string\n %f  for floating point numbers\n %p  for pointers\nand many more.\nWe can use escape characters in  printf() , like  \\n  which we can use to\nmake the output create a new line.\n11.2.  scanf() \n printf()   is  used  as  an  output function. I  want  to  introduce an  input\nfunction now, so we can say we can do all the I/O thing:  scanf() .\nThis function is used to get a value from the user running the program, from\nthe command line.\nWe must first define a variable that will hold the value we get from the input:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":42,"lines":{"from":1,"to":19}}}}],["75",{"pageContent":"int age; \nThen we call  scanf()  with 2 arguments: the format (type) of the variable,\nand the address of the variable:\nint age_yesterday = 36; \nint age_today = 37; \n \nprintf(\"Yesterday my age was %d and today is %d\", age_yesterday, age_today","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":42,"lines":{"from":20,"to":26}}}}],["76",{"pageContent":"42\nscanf(\"%d\", &age); \nIf we want to get a string as input, remember that a string name is a pointer\nto the first character, so you don't need the  &  character before it:\nchar name[20]; \nscanf(\"%s\", name); \nHere's a little program that uses both  printf()  and  scanf() :\n#include <stdio.h> \n \nint main(void) { \n  char name[20]; \n  printf(\"Enter your name: \"); \n  scanf(\"%s\", name); \n  printf(\"you entered %s\", name); \n} \n12. Variables scope\nWhen you define a variable in a C program, depending on where you declare\nit, it will have a different scope.\nThis means that it will be available in some places, but not in others.\nThe position determines 2 types of variables:\nglobal variables","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":43,"lines":{"from":1,"to":21}}}}],["77",{"pageContent":"local variables\nThis is the difference: a variable declared inside a function is a local variable,\nlike this:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":43,"lines":{"from":22,"to":24}}}}],["78",{"pageContent":"43\nint main(void) { \n  int age = 37; \n} \nLocal variables are only accessible from within the function, and when the\nfunction ends they stop their existence. They are cleared from the memory\n(with some exceptions).\nA  variable  defined outside of  a  function is  a  global variable, like  in  this\nexample:\nint age = 37; \n \nint main(void) { \n  /* ... */ \n} \nGlobal variables are accessible from any function of the program, and they\nare available for the whole execution of the program, until it ends.\nI mentioned that local variables are not available any more after the function\nends.\nThe  reason is  that  local  variables are  declared on  the stack,  by  default,","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":44,"lines":{"from":1,"to":19}}}}],["79",{"pageContent":"unless you explicitly allocate them on the heap using pointers, but then you\nhave to manage the memory yourself.\n13. Static variables\nInside a function, you can initialize a static variable using the  static \nkeyword.\nI said \"inside a function\", because global variables are static by default,\nso there's no need to add the keyword.\nWhat's a static variable? A static variable is initialized to 0 if no initial value\nis specified, and it retains the value across function calls.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":44,"lines":{"from":20,"to":28}}}}],["80",{"pageContent":"44\nConsider this function:\nint incrementAge() { \n  int age = 0; \n  age++; \n  return age; \n} \nIf we call  incrementAge()  once, we'll get  1  as the return value. If we call it\nmore than once, we'll always get 1 back, because  age  is a local variable and\nit's re-initialized to  0  on every single function call.\nIf we change the function to:\nint incrementAge() { \n  static int age = 0; \n  age++; \n  return age; \n} \nNow every time we call this function, we'll get an incremented value:\nprintf(\"%d\\n\", incrementAge()); \nprintf(\"%d\\n\", incrementAge()); \nprintf(\"%d\\n\", incrementAge()); \nwill give us\n1 \n2 \n3 \nWe can also omit initializing  age  to 0 in  static int age = 0; , and just","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":45,"lines":{"from":1,"to":25}}}}],["81",{"pageContent":"write  static int age;  because static variables are automatically set to 0\nwhen created.\nWe can also have static arrays. In this case, each single item in the array is\ninitialized to 0:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":45,"lines":{"from":26,"to":29}}}}],["82",{"pageContent":"45\nint incrementAge() { \n  static int ages[3]; \n  ages[0]++; \n  return ages[0]; \n} \n14. Global variables\nIn this section I want to mention the difference between global and local\nvariables.\nA local variable is defined inside a function, and it's only available inside\nthat function.\nLike this:\n#include <stdio.h> \n \nint main(void) { \n  char j = 0; \n  j += 10; \n  printf(\"%u\", j); //10 \n} \n j  is not available anywhere outside the  main  function.\nA global variable is defined outside of any function, like this:\n#include <stdio.h> \n \nchar i = 0; \n \nint main(void) { \n  i += 10; \n  printf(\"%u\", i); //10 \n}","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":46,"lines":{"from":1,"to":29}}}}],["83",{"pageContent":"46\nA global variable can be accessed by any function in the program. Access is\nnot limited to reading the value: the variable can be updated by any function.\nDue to this, global variables are one way we have of sharing the same data\nbetween functions.\nThe main difference with local variables is that the memory allocated for\nvariables is freed once the function ends.\nGlobal variables are only freed when the program ends.\n15. Type definitions\nThe  typedef  keyword in C allows you to defined new types.\nStarting from the built-in C types, we can create our own types, using this\nsyntax:\ntypedef existingtype NEWTYPE; \nThe new type we create is usually, by convention, uppercase.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":47,"lines":{"from":1,"to":14}}}}],["84",{"pageContent":"This it to distinguish it more easily, and immediately recognize it as type.\nFor example we can define a new  NUMBER  type that is an  int :\ntypedef int NUMBER; \nand once you do so, you can define new  NUMBER  variables:\nNUMBER one = 1; \nNow you might ask: why? Why not just use the built-in type  int  instead?\nWell,  typedef  gets really useful when paired with two things: enumerated\ntypes and structures.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":47,"lines":{"from":15,"to":22}}}}],["85",{"pageContent":"47\n16. Enumerated Types\nUsing the  typedef  and  enum  keywords we can define a type that can have\neither one value or another.\nIt's one of the most important uses of the  typedef  keyword.\nThis is the syntax of an enumerated type:\ntypedef enum { \n  //...values \n} TYPENAME; \nThe enumerated type we create is usually, by convention, uppercase.\nHere is a simple example:\ntypedef enum { \n  true, \n  false \n} BOOLEAN; \nC comes with a  bool  type, so this example is not really practical, but you get\nthe idea.\nAnother example is to define weekdays:\ntypedef enum { \n  monday, \n  tuesday, \n  wednesday, \n  thursday, \n  friday, \n  saturday, \n  sunday \n} WEEKDAY;","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":48,"lines":{"from":1,"to":27}}}}],["86",{"pageContent":"Here's a simple program that uses this enumerated type:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":48,"lines":{"from":28,"to":28}}}}],["87",{"pageContent":"48\n#include <stdio.h> \n \ntypedef enum { \n  monday, \n  tuesday, \n  wednesday, \n  thursday, \n  friday, \n  saturday, \n  sunday \n} WEEKDAY; \n \nint main(void) { \n  WEEKDAY day = monday; \n \n  if (day == monday) { \n    printf(\"It's monday!\"); \n  } else { \n    printf(\"It's not monday\"); \n  } \n} \nEvery item in the enum definition is paired to an integer, internally. So in\nthis example  monday  is 0,  tuesday  is 1 and so on.\nThis means the conditional could have been  if (day == 0)  instead of  if\n(day == monday) , but it's way simpler for us humans to reason with names\nrather than numbers, so it's a very convenient syntax.\n17. Structures","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":49,"lines":{"from":1,"to":28}}}}],["88",{"pageContent":"Using the  struct  keyword we can create complex data structures using\nbasic C types.\nA structure is a collection of values of different types. Arrays in C are limited\nto a type, so structures can prove to be very interesting in a lot of use cases.\nThis is the syntax of a structure:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":49,"lines":{"from":29,"to":33}}}}],["89",{"pageContent":"49\nstruct <structname> { \n  //...variables \n}; \nExample:\nstruct person { \n  int age; \n  char *name; \n}; \nYou can declare variables that have as type that structure by adding them\nafter the closing curly bracket, before the semicolon, like this:\nstruct person { \n  int age; \n  char *name; \n} flavio; \nOr multiple ones, like this:\nstruct person { \n  int age; \n  char *name; \n} flavio, people[20]; \nIn this case I declare a single  person  variable named  flavio , and an array\nof 20  person  named  people .\nWe can also declare variables later on, using this syntax:\nstruct person { \n  int age; \n  char *name; \n}; \n \nstruct person flavio;","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":50,"lines":{"from":1,"to":29}}}}],["90",{"pageContent":"50\nWe can initialize a structure at declaration time:\nstruct person { \n  int age; \n  char *name; \n}; \n \nstruct person flavio = { 37, \"Flavio\" }; \nand once we have a structure defined, we can access the values in it using a\ndot:\nstruct person { \n  int age; \n  char *name; \n}; \n \nstruct person flavio = { 37, \"Flavio\" }; \nprintf(\"%s, age %u\", flavio.name, flavio.age); \nWe can also change the values using the dot syntax:\nstruct person { \n  int age; \n  char *name; \n}; \n \nstruct person flavio = { 37, \"Flavio\" }; \n \nflavio.age = 38; \nStructures are  very  useful because we  can  pass  them  around as  function\nparameters, or return values, embedding various variables within them, and","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":51,"lines":{"from":1,"to":28}}}}],["91",{"pageContent":"each variable has a label.\nIt's important to note that structures are passed by copy, unless of course\nyou pass a pointer to a struct, in which case it's passed by reference.\nUsing  typedef  we can simplify the code when working with structures.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":51,"lines":{"from":29,"to":32}}}}],["92",{"pageContent":"51\nLet's make an example:\ntypedef struct { \n  int age; \n  char *name; \n} PERSON; \nThe  structure we  create using  typedef   is  usually, by  convention,\nuppercase.\nNow we can declare new  PERSON  variables like this:\nPERSON flavio; \nand we can initialize them at declaration in this way:\nPERSON flavio = { 37, \"Flavio\" }; \n18. Command line parameters\nIn your C programs, you might have the need to accept parameters from the\ncommand line when the command launches.\nFor simple needs, all you need to do so is change the  main()   function\nsignature from\nint main(void)\nto\nint main (int argc, char *argv[])\n argc  is an integer number that contains the number of parameters that","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":52,"lines":{"from":1,"to":21}}}}],["93",{"pageContent":"were provided in the command line.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":52,"lines":{"from":22,"to":22}}}}],["94",{"pageContent":"52\n argv  is an array of strings.\nWhen the  program starts, we  are  provided the  arguments in  those  2\nparameters.\nNote that there's always at least one item in the  argv  array: the name of\nthe program\nLet's take the example of the C compiler we use to run our programs, like\nthis:\ngcc hello.c -o hello \nIf this was our program, we'd have  argc  being 4 and  argv  being an array\ncontaining\n gcc \n hello.c \n -o \n hello \nLet's write a program that prints the arguments it receives:\n#include <stdio.h> \n \nint main (int argc, char *argv[]) { \n  for (int i = 0; i < argc; i++) { \n    printf(\"%s\\n\", argv[i]); \n  } \n} \nIf the name of our program is  hello  and we run it like this:  ./hello , we'd","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":53,"lines":{"from":1,"to":24}}}}],["95",{"pageContent":"get this as output:\n./hello \nIf we pass some random parameters, like this:  ./hello a b c  we'd get this\noutput to the terminal:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":53,"lines":{"from":25,"to":28}}}}],["96",{"pageContent":"53\n./hello \na \nb \nc \nThis system works great for simple needs. For more complex needs, there are\ncommonly used packages like getopt.\n19. Header files\nSimple programs can be put in a single file, but when your program grows\nlarger, it's impossible to keep it all in just one file.\nYou can move parts of a program to a separate file, then you create a header\nfile.\nA header file looks like a normal C file, except it ends with  .h  instead of\n .c , and instead of the implementations of your functions and the other\nparts of a program, it holds the declarations.\nYou already used header files when you first used the  printf()  function, or\nother I/O function, and you had to type:\n#include <stdio.h>","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":54,"lines":{"from":1,"to":18}}}}],["97",{"pageContent":"to use it.\n #include  is a preprocessor directive.\nThe preprocessor goes and looks up the  stdio.h  file in the standard library,\nbecause you used brackets around it. To include your own header files, you'll\nuse quotes, like this:\n#include \"myfile.h\"\nThe above will look up  myfile.h  in the current folder.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":54,"lines":{"from":19,"to":25}}}}],["98",{"pageContent":"54\nYou can also use a folder structure for libraries:\n#include \"myfolder/myfile.h\"\nLet's make an example. This program calculates the years since a given year:\n#include <stdio.h> \n \nint calculateAge(int year) { \n  const int CURRENT_YEAR = 2020; \n  return CURRENT_YEAR - year; \n} \n \nint main(void) { \n  printf(\"%u\", calculateAge(1983)); \n} \nSuppose I want to move the  calculateAge  function to a separate file.\nI create a  calculate_age.c  file:\nint calculateAge(int year) { \n  const int CURRENT_YEAR = 2020; \n  return CURRENT_YEAR - year; \n} \nAnd a  calculate_age.h  file where I put the function prototype, which is\nsame as the function in the  .c  file, except the body:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":55,"lines":{"from":1,"to":22}}}}],["99",{"pageContent":"int calculateAge(int year); \nNow in the main  .c  file we can go and remove the  calculateAge()  function\ndefinition, and  we  can  import  calculate_age.h ,  which will  make  the\n calculateAge()  function available:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":55,"lines":{"from":23,"to":26}}}}],["100",{"pageContent":"55\n#include <stdio.h>\n#include \"calculate_age.h\" \n \nint main(void) { \n  printf(\"%u\", calculateAge(1983)); \n} \nDon't forget that to compile a program composed by multiple files, you need\nto list them all in the command line, like this:\ngcc -o main main.c calculate_age.c \nAnd with more complex setups, a Makefile is necessary to tell the compiler\nhow to compile the program.\n20. The preprocessor\nThe preprocessor is a tool that helps us a lot when programming with C. It is\npart of the C Standard, just like the language, the compiler and the standard\nlibrary.\nIt parses our program and makes sure that the compiler gets all the things it\nneeds before going on with the process.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":56,"lines":{"from":1,"to":18}}}}],["101",{"pageContent":"What does it do, in practice?\nFor example, it looks up all the header files you include with the  #include \ndirective.\nIt also looks at every constant you defined using  #define  and substitutes it\nwith its actual value.\nThat's just the start, and I mentioned those 2 operations because they are the\nmost common ones. The preprocessor can do a lot more.","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":56,"lines":{"from":19,"to":25}}}}],["102",{"pageContent":"56\nDid you notice  #include  and  #define  have a  #  at the beginning? That's\ncommon to all the preprocessor directives. If a line starts with  # , that's\ntaken care by the preprocessor.\n20.1. Conditionals\nOne of the things we can do is to use conditionals to change how our program\nwill be compiled, depending on the value of an expression.\nFor example we can check if the  DEBUG  constant is 0:\n#include <stdio.h> \n \nconst int DEBUG = 0; \n \nint main(void) { \n#if DEBUG == 0 \n  printf(\"I am NOT debugging\\n\"); \n#else \n  printf(\"I am debugging\\n\"); \n#endif \n} \n20.2. Symbolic constants\nWe can define a symbolic constant:\n#define VALUE 1\n#define PI 3.14\n#define NAME \"Flavio\"","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":57,"lines":{"from":1,"to":24}}}}],["103",{"pageContent":"When we  use  NAME  or  PI  or  VALUE in  our  program, the  preprocessor\nreplaces its name with the value, before executing the program.\nSymbolic constants  are  very  useful because we  can  give  names  to  values\nwithout creating variables at compilation time.\n20.3. Macros","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":57,"lines":{"from":25,"to":29}}}}],["104",{"pageContent":"57\nWith  #define  we can also define a macro. The difference between a macro\nand a symbolic constant is that a macro can accept an argument and typically\ncontains code, while a symbolic constant is a value:\n#define POWER(x) ((x) * (x))\nNotice the parentheses around the arguments, a good practice to avoid\nissues when the macro is replaced in the precompilation process.\nThen we can use it in our code like this:\nprintf(\"%u\\n\", POWER(4)); //16\nThe big difference with functions is that macros do not specify the type of\ntheir arguments or return values, which might be handy in some cases.\n20.4. If defined\nWe can check if a symbolic constant or a macro is defined using  #ifdef :\n#include <stdio.h>","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":58,"lines":{"from":1,"to":14}}}}],["105",{"pageContent":"#define VALUE 1 \n \nint main(void) { \n#ifdef VALUE \n  printf(\"Value is defined\\n\"); \n#else \n  printf(\"Value is not defined\\n\"); \n#endif \n} \nWe also have  #ifndef  to check for the opposite (macro not defined).\nWe can also use  #if defined  and  #if !defined  to do the same task.\nIt's common to wrap some block of code into a block like this:","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":58,"lines":{"from":15,"to":26}}}}],["106",{"pageContent":"58\n#if 0 \n \n#endif\nto temporarily prevent it to run, or to use a DEBUG symbolic constant:\n#define DEBUG 0 \n \n#if DEBUG \n  //code only sent to the compiler \n  //if DEBUG is not 0\n#endif\n20.5. Predefined symbolic constants you can\nuse\nThe preprocessor also defines a number of symbolic constants you can use,\nidentified by the 2 underscores before and after the name, including:\n __LINE__  translates to the current line in the source code file\n __FILE__  translates to the name of the file\n __DATE__  translates to the compilation date, in the  Mmm gg aaaa  format\n __TIME__  translates to the compilation time, in the  hh:mm:ss  format","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":59,"lines":{"from":1,"to":19}}}}],["107",{"pageContent":"59\nConclusion\nThanks a lot for reading this book.\nFor more, head over to flaviocopes.com.\nSend any feedback, errata or opinions at flavio@flaviocopes.com","metadata":{"source":"/home/omar/repos/ChatPDF/app/PDFfiles/082bd2c8-7c1f-47f7-948f-3299b448ce7c.c handbook","pdf":{"version":"1.10.100","info":{"PDFFormatVersion":"1.4","IsAcroFormPresent":false,"IsXFAPresent":false,"Title":"The C Handbook","Author":"Flavio Copes","Creator":"HonKit","Producer":"HonKit","CreationDate":"D:20230423130543+00'00'","ModDate":"D:20230423150544+02'00'"},"metadata":{"_metadata":{"dc:title":"The C Handbook","dc:description":"","dc:creator":"Flavio Copes","dc:subject":"","dc:publisher":"HonKit","dc:language":"en","xmp:metadatadate":"2023-04-23T15:05:45.863132+02:00","calibre:timestamp":"2023-04-23T15:05:41.291571+02:00"}},"totalPages":60},"loc":{"pageNumber":60,"lines":{"from":1,"to":5}}}}]]